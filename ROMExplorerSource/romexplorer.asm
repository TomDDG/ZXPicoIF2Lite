; ZX Spectrum ROM Selector v1.1a
;   to use with the v1.0 ZX PicoIF2Lite PCB
; ------------------------------------------+----------------------------------	
; v1.1 - updated base screen and icons
; v1.1a - added i register just in case
; ------------------------------------------+----------------------------------	
; max 126 roms 7 bits
; x1111110
; ------------------------------------------+----------------------------------	
; set _maxroms+1 
; set _right+1 with maximum pages
; ------------------------------------------+----------------------------------	
MEM_SCR		EQU		0x4000					; screen pixels
MEM_ROMTXT	EQU		0x6000					; text
MEM_SP		EQU		0x7FF8					; stack pointer start
MEM_KEYR	EQU		0x7FF9					; key repeat	
MEM_KEYL	EQU		0x7FFA					; last key
MEM_TXT		EQU		0x7FFB					; text start
MEM_POS 	EQU 	0x7FFD					; cursor row
MEM_ROM 	EQU 	0x7FFE					; selected ROM
MEM_PAGE 	EQU 	0x7FFF					; which page
; ------------------------------------------+----------------------------------	
;MEM_ORG 	EQU 	0x8000					; start of code **this is for testing**
MEM_ORG 	EQU 	0x0000					; start of code
MEM_LTBL 	EQU 	MEM_ORG+0xE00			; lookup table MEM_LTBLP-512
MEM_LTBLP	EQU		MEM_LTBL+0x200			; lookup table start
; ------------------------------------------+----------------------------------	
; initial set-up
; ------------------------------------------+----------------------------------	
org MEM_ORG
	di										; disable interrupts
	ld a,0x80								; set i to 0x80
	ld i,a
	ld sp,MEM_SP							; stack pointer
_memrom:
	ld a,0									; set start rom (0-x)
	ld (MEM_ROM),a
_mempos:
	ld a,0									; set start pos (0-20)
	ld (MEM_POS),a
_mempage:
	ld a,1									; set start page (1-x)
	ld (MEM_PAGE),a
	xor a									
	ld (MEM_KEYL),a							; reset last key	
	ld hl,_textData							; decompress text to RAM
	ld de,MEM_ROMTXT
	call _decompressTxt	
	call _txtMem							; set start txt mem for page	
	ld a,%00000111							; white border
	out (0xfe),a
	im 1									; interrupt mode 1
	ei										; enable interrupts
	jr _menu
; ------------------------------------------+----------------------------------	
; IM1 maskable interrupt routine @ 0x0038
; ------------------------------------------+----------------------------------	
org MEM_ORG+0x0038
	ei
	ret
; ------------------------------------------+----------------------------------	
; Menu Routine
; ------------------------------------------+----------------------------------	
_menu:
    ld hl,_compressedBlank					; blank explorer screen
	call _decompressScr 					; decompress screen
	ld de,MEM_SCR+1 						; start of ZX Spectrum ROM Explorer vx.x text on screen
	exx 									; alt	
	ld de,_menuHeader
	call _pltText							; plot the text
	exx 									; norm
; ------------------------------------------+----------------------------------
; Plot Slider at RHS of Screen
;   max 126 ROMs can be added which is 6 pages with 21 entries per page	
;   routine can handle 1,2,3,4,5 & 6 pages with predetermined plot
; ------------------------------------------+----------------------------------
	ld de,_sliderData-6						; get correct plot
	ld a,(_right+1)							; get max pages
	add a,a									; x2
	ld c,a									; x2 into c
	add a,a 								; x4
	add a,c 								; x6
	add a,e	
	ld e,a	
	adc a,d	
	sub e
	ld d,a									; de now correct slider plot
	ld hl,MEM_SCR+64+31						; start screen pixel pos
	ex af,af'								; alta
	ld a,(MEM_PAGE)							; get current page
	ex af,af'								; norma
_pltSliderLoop:
	ld a,(de)								;  get number of lines to plot
	or a 
	jr z,_menuTxt							; if zero all done
	inc de
	ld b,a
	ex af,af'								; alta
	ld c,%01111110							; set to clear slider
	dec a
	jr nz,_noSlider							; if not the current page skip reassignment
	ld c,%01000010							; set to plot slider
_noSlider:
	ex af,af'								; norma
_sliderLoop:
	ld (hl),c								; plot slider or clear to screen
	inc h									; down one within char row
	ld a,h
	and %00000111							; check if char complete (8 rows)
	jr nz,_sliderChar
	ld a,l
	add a,32								; if complete move down one
	ld l,a
	jr c,_sliderChar						; into next screen sector?
	ld a,h
	sub 8									; now so back up to top of char
	ld h,a
_sliderChar:
	djnz _sliderLoop
	jr _pltSliderLoop
; ------------------------------------------+----------------------------------	
; pre-defined table to plot the slider	
; ------------------------------------------+----------------------------------	
_sliderData:
	defb 160,  0,  0,  0,  0,  0			; 1 page
	defb  80, 80,  0,  0,  0,  0			; 2 pages
	defb  53, 54, 53,  0,  0,  0			; 3 pages
	defb  40, 40, 40, 40,  0,  0			; 4 pages
	defb  32, 32, 32, 32, 32,  0			; 5 pages
	defb  27, 27, 26, 26, 27, 27			; 6 pages		
; ------------------------------------------+----------------------------------	
; Show all the text (variable width)
; ------------------------------------------+----------------------------------		
_menuTxt:	
	ld de,MEM_SCR+64 						; start of text on screen
	exx 									; alt	
	ld de,(MEM_TXT)							; get text start
	call _pltText							; plot the text
	exx 									; norm
; ------------------------------------------+----------------------------------	
; Colour in selection bar to mimic 128k menu 
; ------------------------------------------+----------------------------------	
_menu100:
	ld a,(MEM_POS)							; get pos from storage
	ld c,a									; pos into c
_menu200:
	call _colbar							; colour in the bar
; ------------------------------------------+----------------------------------	
; Simple key up/down routine, with key repeat
;   0.7 second wait for 1st repeat, then 0.1 seconds
; ------------------------------------------+----------------------------------	
_menu300:
	call _getkey							; get key press
	and %00111111
	jr z,_menu370							; key up
	ld b,a
	ld a,(MEM_KEYL)							; get last key
	cp b
	jr nz,_menu350
	halt									;  wait 1/50th second
	ld a,(MEM_KEYR)
	dec a
	jr nz,_menu360
	ld a,5									; 0.1seconds
	ld (MEM_KEYR),a							; clear key repeat delay
	ld a,b
	jr _menu450
_menu350:	
	ld a,b 
	ld (MEM_KEYL),a							; store new key
	ld a,35									; 0.7seconds
_menu360:
	ld (MEM_KEYR),a							; clear key repeat delay
	jr _menu300	
_menu370:
	ld a,35									; 0.7seconds
	ld (MEM_KEYR),a							; clear key repeat delay	
_menu400:
	call _getkey							; get key press
	and %00111111							; wait for key down
	jr z,_menu400
_menu450:
; ------------------------------------------+----------------------------------	
; Simple beeper routine to simulate basic keyclick
;   port 0xfe -> 0,0,0,ear,mic,border,border,border
; ------------------------------------------+----------------------------------	
	ld e,a									; preserve a
	ld b,0x3f
	ld a,%00011111							; keep border white and mic/ear bits set
	out (0xfe),a
_clickLoop:	
	djnz _clickLoop							; wait 63*13t -5t = 814t
	ld a,%00001111							; switch ear bit to zero to create tiny click
	out (0xfe),a
	ld a,e									; restore a
; ------------------------------------------+----------------------------------	
; Check which button pressed using carry flag
;   bit 0 - fire, bit 1 - left, bit 2 - right, bit 3 - up, bit 4 - down
; ------------------------------------------+----------------------------------	
	rra										; fire pressed	
	jp c,_romSelected
	rra 									; left pressed
	jp c,_left	
	rra										; right pressed
	jr c,_right		
	rra										; up pressed
	jr c,_up
; ------------------------------------------+----------------------------------
; Down pressed - down one row or to next page if at bottom	
; ------------------------------------------+----------------------------------
	ld a,c
	cp 20									; at bottom? (0-20 or 21 entries)
	jr nz,_down100							; if at bottom jump to pgdn
	ld a,(_right+1)							; max pages
	ld b,a
	ld a,(MEM_PAGE)							; current page
	cp b
	jr z,_menu300							; if at max do nothing
	inc a
	ld (MEM_PAGE),a							; page down
	xor a
	ld (MEM_POS),a							; back to the top
	ld a,(MEM_ROM)
	inc a									; back to the top
	jr _right200
_down100:	
	ld a,(MEM_ROM)
_maxroms:
	cp 10									; pre-loaded max roms (-1 as 0 to max)
	jr z,_menu300							; at maximum? if so do nothing
	inc a
	ld (MEM_ROM),a
	call _clrbar							; clear coloured line
	inc c									; pos +1
	jr _up100
; ------------------------------------------+----------------------------------
; Up pressed - up one row or previous page if at top
; ------------------------------------------+----------------------------------
_up:
	ld a,c
	or a									; at top?
	jr nz,_up050							; if at top jump to pgup
	ld a,(MEM_PAGE)
	dec a
	jp z,_menu300							; if already at 1st then do nothing	
	ld (MEM_PAGE),a							; page down	
	ld a,20
	ld (MEM_POS),a							; to bottom
	ld a,(MEM_ROM)
	dec a									; back one rom
	jr _right200
_up050:
	ld a,(MEM_ROM)
	or a
	jp z,_menu300							; if rom=0 do nothing
	dec a
	ld (MEM_ROM),a
	call _clrbar							; clear coloured line
	dec c									; pos -1
_up100:
	ld a,c
	ld (MEM_POS),a
	jp _menu200						
; ------------------------------------------+----------------------------------
; Right pressed - Page Down
;   _right+1 is max pages
; ------------------------------------------+----------------------------------
_right:
	ld b,1									; pre-loaded max pages
	ld a,(MEM_PAGE)							; current page
	cp b
	jr nz,_right100 						; if not zero then page down
	call _clrbar							; clear coloured line	
	ld a,(MEM_ROM)
	ld b,a
	ld a,(_maxroms+1)
	ld (MEM_ROM),a							; rom = maxrom
	sub b 
	add a,c	
	ld (MEM_POS),a
	jp _menu100	
_right100:
	inc a
	ld (MEM_PAGE),a							; page down
	ld a,(MEM_ROM)
	add a,21								; add 21 roms
	ld b,a									; now need to check not > maxroms
	ld a,(_maxroms+1)
	cp b
	jr nc,_right150							; if rom > maxroms then fix
	ld e,a									; e=maxrom
	sub b									; difference max to over
	add a,c
	ld (MEM_POS),a
	ld b,e									; b=maxrom
_right150:
	ld a,b
_right200:	
	ld (MEM_ROM),a
	call _txtMem							; get start of new page text
	jp _menu
; ------------------------------------------+----------------------------------
; Left pressed - Page Up
; ------------------------------------------+----------------------------------
_left:
	ld a,(MEM_PAGE)							; which page
	dec a
	jr nz,_left100							; if not zero then page up
	ld (MEM_ROM),a							; just move to top
	ld (MEM_POS),a							; which is row & rom=0
	call _clrbar							; clear coloured line
	jp _menu100
_left100:
	ld (MEM_PAGE),a
	ld a,(MEM_ROM)
	sub 21									; one page up but same position
	jr _right200
; ------------------------------------------+----------------------------------
; All done so access correct memory location to trigger ROM Switch
;   16256+ - so any address access 16256+ activates the selection
;   16256 = ROM 0
;   16320 = ROM 64
; ------------------------------------------+----------------------------------
_romSelected:
	ld a,(MEM_ROM)
	push af
	ld hl,_compressedOff					; Off Screen
	or a
	jr z,_romSelected100
	ld hl,_compressedROMSwitch				; ROM Switch Screen
_romSelected100:
	call _decompressScr	
	pop af 
	add a,0x80 
	ld h,0x3f
	ld l,a									; hl now correct	
_romSelectedLoop:
	ld a,(hl) 								; read address location to activate
	jr _romSelectedLoop	
; ------------------------------------------+----------------------------------
; Find correct MEM_ROMTXT start depending on page and load into MEM_TXT
; ------------------------------------------+----------------------------------
_txtMem:
	ld de,MEM_ROMTXT
	ld a,(MEM_PAGE)	
	ld c,a	
_txtMem100:
	dec c									; correct page?
	jr z,_txtMem300							; page correct
_txtMem200:
	ld a,(de)								; get char
	inc de
	or a									; search for end marker
	jr nz,_txtMem200
	jr _txtMem100							; see if this page is right
_txtMem300:
	ld (MEM_TXT),de							; store for other routines
	ret	
; ------------------------------------------+----------------------------------
; Get KeyPress
;   reads 6,7,8,9,0,5,4,3,2,1,h,j,k,l & enter to get byte 000durlf
;   l=left(5), r=right(8), d=down(6), u=up(7), f=fire(enter)
;   0xef (6,7,8,9,0) 0xdf (y,u,i,o,p) 0xbf (h,j,k,l,en) 0x7f (b,n,m,ss,sp)
;   0xf7 (5,4,3,2,1) 0xfb (t,r,e,w,q) 0xfd (g,f,d,s,a) 0xfe (v,c,x,z,sh)  
; ------------------------------------------+----------------------------------
_getkey:
	ld a,0xef								; read 6,7,8,9,0 (6 down, 7 up, 8 right)
	in a,(0xfe)								; read
	cpl										; so keypress = 1 not 0
	and %00011100							; only keep 6,7,8
	ld b,a
	ld a,0xbf								; read h,j,k,l,enter
	in a,(0xfe)								; read
	cpl										; so keypress = 1 not 0
	and %00000001							; only keep enter
	or b
	ld b,a
	ld a,0xf7								; read 5,4,3,2,1
	in a,(0xfe)								; read
	rrca 
	rrca 
	rrca 									; move 5 to bit 1
	cpl										; so keypress = 1 not 0
	and %00000010							; only keep 5
	or b									; bring in the rest
	ret
; ------------------------------------------+----------------------------------
; Colour in the Select Text
;   either colour in cyan (_colbar) or clear with white (_clrbar)
; input: c=char row (preserved)
; ------------------------------------------+----------------------------------
_clrbar:
	ld d,%01111000							; paper=white
	jr _colbar100
_colbar:
	ld d,%01101000							; paper=cyan
_colbar100:
	ld a,c
	add a,2 								; 2-23
	add a,a									; x2
	add a,a									; x4
	add a,a									; x8 (max 23*8=184)
	ld l,a
	ld h,0
	add hl,hl 								; x16
	add hl,hl 								; x32
	ld a,h
	add a,0x58								; ATTR
	ld h,a
	ld b,31									; colour in 31 chars
_colbarLoop:	
	ld (hl),d
	inc l
	djnz _colbarLoop
	ret
; ------------------------------------------+----------------------------------
; Variable Width Text Plot Routine
;   plots ASCII char from 32 (space) to 127 (copyright)
;     plus 4 icons at position 28,29,30 & 31
;   three escape codes also checked
;      0 (NUL) exits routine
;      9 (TAB) which moves the cursor to rhs of screen, used to plot if1 icon
;     10 (LF) which moves the cursor down one char row
;   anything entered different to above just exits, so >127 & <28
; input: de - memory location of text to plot
; ------------------------------------------+----------------------------------
_pltText:
	ld bc,0x0000							; gap & rotation =0
_pltTextLoop:
	ld a,(de)								; get char
	ld hl,_gapLengthData-32
	add a,l
	ld l,a
	adc a,h
	sub l
	ld h,a 									; hl now correct width of char
	ld b,(hl) 								; b=gap, c=rotation
	ld a,c
	add a,a 								; x2
	add a,MEM_LTBL/256
	ld h,a									; h now correct high byte in lookup table for the rotation
	ld a,(de)								; get char again
	inc de									; next mem
	add a,a 								; x2 (max char=127)
	ret z									; return on char=zero
	ret c									; return on char > 127
	cp 18									; check for tab (9*2)
	jr nz,_noTab
	exx										; norm
	ld a,e
	and %11100000 							; back to left hand side of screen
	or %00011101							; move to right hand side of screen
	ld e,a	
	jr _lf100
_noTab:
	cp 20 									; check for line feed (10*2)
	jr nz,_noLf
	exx 									; norm
	ld a,e
	and %11100000 							; back to left hand side of screen
	add a,32								; move one line down
	ld e,a
	jr nc,_lf100							; if no carry then no need to adjust screen high byte
	ld a,d
	add a,8									; move down one screen sector
	ld d,a
_lf100:
	exx 									; alt
	ld c,0 									; reset rotation
	jr _pltTextLoop	
_noLf:
	cp 52									; check for invalid char <28
	ret c
	exx 									; norm
	ld l,a 
	ld h,0
	add hl,hl 								; x4
	add hl,hl 								; x8
	ld bc,_shiftedFontData-256 				; -256 as space is 32 which *8 is 256
	add hl,bc								; hl now correct graphic location
	exx 									; alt
	ld a,c									; rotation
	exx 									; norm
	ld c,d
	ld b,8	
	ex de,hl 
	or a 									; check if any rotation
	jr nz,_rotatedVersion
_nonRotatedLoop:
	ld a,(de)								; get byte
	ld (hl),a								; to screen
	inc de									; next byte
	inc h									; down one char row
	djnz _nonRotatedLoop
	jr _rotationDone
_rotatedVersion:
	ld a,(de)
	inc de	
	exx 									; alt
	ld l,a									; byte into rotation lookup table low byte
	ld a,(hl)								; get lhs
	exx 									; norm
	or (hl)									; or with screen, not overwritten
	ld (hl),a								; put or'd byte to screen
	exx 									; alt
	inc h									; to rhs of rotation lookup table
	ld a,(hl) 								; get rhs
	dec h									; back to lhs of rotation lookup table
	exx										; norm
	inc hl	
	ld (hl),a
	dec hl
	inc h
	djnz _rotatedVersion
_rotationDone:
	ex de,hl
	ld d,c	
	exx 									; alt
	ld a,b	
	add a,c 								; add char width to current rotation to get new rotation
	cp 8									; if >7 then move the next char
	jr c,_newRotation
	exx 									; norm
	inc de									; next char
	exx 									; alt
	sub 8									; if in next char reduce rotation by 8 bits
_newRotation:
	ld c,a									; put new rotation into c
	jr _pltTextLoop	
_menuHeader:
	defb "ZX Spectrum ROM Selector v1.1a",0
; ------------------------------------------+----------------------------------
; Left Aligned Sinclair ZX Spectrum Font - used for variable width font routine
;   first 6 are icons, then space (32) to copyright (127) (128+4 *8=1056b)
; ------------------------------------------+----------------------------------
	DEFB	127,198,245,238,221,196,127,  0 ; 26 - z80_l
	DEFB	252,102, 86,214, 86,206,252,  0 ; 27 - z80_r
	DEFB	127,197,245,238,221,197,127,  0 ; 28 - zxc_l
	DEFB	252,102, 94,222, 94,102,252,  0 ; 29 - zxc_r
	DEFB	144,128,144,138,144,128,144,128	; 30 - left hand side
	DEFB	144,128,144,138,128,128,128,128 ; 31 - left hand side last one
_shiftedFontData:
	DEFB	  0,  0,  0,  0,  0,  0,  0,  0	; 32 - space
	DEFB	  0, 64, 64, 64, 64,  0, 64,  0
	DEFB	  0, 72, 72,  0,  0,  0,  0,  0
	DEFB	  0, 36,126, 36, 36,126, 36,  0
	DEFB	  0, 16,124, 80,124, 20,124, 16
	DEFB	  0, 98,100,  8, 16, 38, 70,  0
	DEFB	  0, 16, 40, 16, 42, 68, 58,  0
	DEFB	  0, 32, 64,  0,  0,  0,  0,  0
	DEFB	  0, 32, 64, 64, 64, 64, 32,  0
	DEFB	  0, 64, 32, 32, 32, 32, 64,  0
	DEFB	  0,  0, 40, 16,124, 16, 40,  0
	DEFB	  0,  0, 16, 16,124, 16, 16,  0
	DEFB	  0,  0,  0,  0,  0, 32, 32, 64
	DEFB	  0,  0,  0,  0,124,  0,  0,  0
	DEFB	  0,  0,  0,  0,  0, 96, 96,  0
	DEFB	  0,  0,  4,  8, 16, 32, 64,  0
	DEFB	  0, 60, 70, 74, 82, 98, 60,  0
	DEFB	  0, 48, 80, 16, 16, 16,124,  0
	DEFB	  0, 60, 66,  2, 60, 64,126,  0
	DEFB	  0, 60, 66, 12,  2, 66, 60,  0
	DEFB	  0,  8, 24, 40, 72,126,  8,  0
	DEFB	  0,126, 64,124,  2, 66, 60,  0
	DEFB	  0, 60, 64,124, 66, 66, 60,  0
	DEFB	  0,126,  2,  4,  8, 16, 16,  0
	DEFB	  0, 60, 66, 60, 66, 66, 60,  0
	DEFB	  0, 60, 66, 66, 62,  2, 60,  0
	DEFB	  0,  0,  0, 64,  0,  0, 64,  0
	DEFB	  0,  0, 32,  0,  0, 32, 32, 64
	DEFB	  0,  0, 16, 32, 64, 32, 16,  0
	DEFB	  0,  0,  0,124,  0,124,  0,  0
	DEFB	  0,  0, 64, 32, 16, 32, 64,  0
	DEFB	  0, 60, 66,  4,  8,  0,  8,  0
	DEFB	  0, 60, 74, 86, 94, 64, 60,  0
	DEFB	  0, 60, 66, 66,126, 66, 66,  0
	DEFB	  0,124, 66,124, 66, 66,124,  0
	DEFB	  0, 60, 66, 64, 64, 66, 60,  0
	DEFB	  0,120, 68, 66, 66, 68,120,  0
	DEFB	  0,126, 64,124, 64, 64,126,  0
	DEFB	  0,126, 64,124, 64, 64, 64,  0
	DEFB	  0, 60, 66, 64, 78, 66, 60,  0
	DEFB	  0, 66, 66,126, 66, 66, 66,  0
	DEFB	  0,124, 16, 16, 16, 16,124,  0
	DEFB	  0,  2,  2,  2, 66, 66, 60,  0
	DEFB	  0, 68, 72,112, 72, 68, 66,  0
	DEFB	  0, 64, 64, 64, 64, 64,126,  0
	DEFB	  0, 66,102, 90, 66, 66, 66,  0
	DEFB	  0, 66, 98, 82, 74, 70, 66,  0
	DEFB	  0, 60, 66, 66, 66, 66, 60,  0
	DEFB	  0,124, 66, 66,124, 64, 64,  0
	DEFB	  0, 60, 66, 66, 82, 74, 60,  0
	DEFB	  0,124, 66, 66,124, 68, 66,  0
	DEFB	  0, 60, 64, 60,  2, 66, 60,  0
	DEFB	  0,127,  8,  8,  8,  8,  8,  0
	DEFB	  0, 66, 66, 66, 66, 66, 60,  0
	DEFB	  0, 66, 66, 66, 66, 36, 24,  0
	DEFB	  0, 66, 66, 66, 66, 90, 36,  0
	DEFB	  0, 66, 36, 24, 24, 36, 66,  0
	DEFB	  0, 65, 34, 20,  8,  8,  8,  0
	DEFB	  0,126,  4,  8, 16, 32,126,  0
	DEFB	  0,112, 64, 64, 64, 64,112,  0
	DEFB	  0,  0, 64, 32, 16,  8,  4,  0
	DEFB	  0,112, 16, 16, 16, 16,112,  0
	DEFB	  0, 16, 56, 84, 16, 16, 16,  0
	DEFB	  0,  0,  0,  0,  0,  0,  0,127
	DEFB	  0, 28, 34,120, 32, 32,126,  0
	DEFB	  0,  0, 56,  4, 60, 68, 60,  0
	DEFB	  0, 64, 64,120, 68, 68,120,  0
	DEFB	  0,  0, 56, 64, 64, 64, 56,  0
	DEFB	  0,  4,  4, 60, 68, 68, 60,  0
	DEFB	  0,  0, 56, 68,120, 64, 60,  0
	DEFB	  0, 48, 64, 96, 64, 64, 64,  0
	DEFB	  0,  0, 60, 68, 68, 60,  4, 56
	DEFB	  0, 64, 64,120, 68, 68, 68,  0
	DEFB	  0, 32,  0, 96, 32, 32,112,  0
	DEFB	  0,  8,  0,  8,  8,  8, 72, 48
	DEFB	  0, 64, 80, 96, 96, 80, 72,  0
	DEFB	  0, 64, 64, 64, 64, 64, 48,  0
	DEFB	  0,  0,104, 84, 84, 84, 84,  0
	DEFB	  0,  0,120, 68, 68, 68, 68,  0
	DEFB	  0,  0, 56, 68, 68, 68, 56,  0
	DEFB	  0,  0,120, 68, 68,120, 64, 64
	DEFB	  0,  0, 60, 68, 68, 60,  4,  6
	DEFB	  0,  0, 56, 64, 64, 64, 64,  0
	DEFB	  0,  0, 56, 64, 56,  4,120,  0
	DEFB	  0, 32,112, 32, 32, 32, 24,  0
	DEFB	  0,  0, 68, 68, 68, 68, 56,  0
	DEFB	  0,  0, 68, 68, 40, 40, 16,  0
	DEFB	  0,  0, 68, 84, 84, 84, 40,  0
	DEFB	  0,  0, 68, 40, 16, 40, 68,  0
	DEFB	  0,  0, 68, 68, 68, 60,  4, 56
	DEFB	  0,  0,124,  8, 16, 32,124,  0
	DEFB	  0, 28, 16, 96, 16, 16, 28,  0
	DEFB	  0, 64, 64, 64, 64, 64, 64,  0
	DEFB	  0,112, 16, 12, 16, 16,112,  0
	DEFB	  0, 40, 80,  0,  0,  0,  0,  0
	DEFB	 28, 34, 93, 81, 93, 34, 28,  0	; 127 - copyright
; ------------------------------------------+----------------------------------
; Length of each Char - used for variable width font routine (100b)
; ------------------------------------------+----------------------------------
	defb 8,8,8,8,8,8						; 6 icons
_gapLengthData:								; start at space (32)
	defb 4,2,5,7,6,7,7,3,3,3,6,6,3,6,3,6,7,6,7,7,7,7,7,7,7,7,2,3,4,6,4,7
;          ! " # $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ?
	defb 7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,8,7,7,7,7,8,7,4,6,4,6,8
;        @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ] ^ _
	defb 7,6,6,5,6,6,4,6,6,4,5,5,4,6,6,6,6,7,5,6,5,6,6,6,6,6,6,6,2,6,5,8
;	     £ a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~ copyright
; ------------------------------------------+----------------------------------
; Compressed Screen Decompression Routine (33b)
;   very simple and fast lz with 256byte backward look
; input: hl - memory location of compressed screen or text block
; ------------------------------------------+----------------------------------
_decompressScr:
    ld de,MEM_SCR							; start of screen pixels
_decompressTxt:
    ld b,e									; b=0
    jr _loop
_copy:
    inc a
    ld c,a									; loop counter into bc for ldir
    ldir
_loop:
    ld a,(hl)								; get byte
    inc hl
    cp 128									; end?
    ret z
    jr c,_copy								; if <128 straight copy a times
    sub 126									; offset copy length max 130
    ld c,(hl)								; get offset b=0, c 0=1, 255=256
    inc hl
    push hl									; preserve compression pos
    ld h,d
    ld l,e
    sbc hl,bc								; shift screen pos by offset bc
    dec hl									; -1 as 1to256 not 0to255
    ld c,a									; loop counter into bc for ldir
    ldir
    pop hl
    jr _loop								; restore compression pos
; ------------------------------------------+----------------------------------
; Compressed ROM Selector Blank Screen
; 383bytes (from 6912b, 94% compression)
; ------------------------------------------+----------------------------------
_compressedBlank:
  defb 0x00,0x00,0x97,0x00,0x00,0x01,0x82,0x00,0x01,0x00,0x80,0x98,0x20,0x83,0x3a,0x9d
  defb 0x1f,0x00,0x7e,0xff,0x1f,0x9d,0x9f,0x98,0xff,0x00,0x03,0x82,0x00,0x01,0x00,0xb0
  defb 0xff,0xff,0xf6,0xff,0x00,0x07,0x82,0x00,0x01,0x00,0xae,0x9c,0xff,0x00,0x18,0xff
  defb 0xff,0xd7,0xff,0x00,0x0f,0x82,0x00,0x01,0x00,0xb1,0x9c,0xff,0x00,0x3c,0xff,0xff
  defb 0xd7,0xff,0x00,0x1f,0x82,0x00,0x01,0x00,0xa1,0xff,0xdf,0xf6,0xff,0x00,0x3f,0x82
  defb 0x00,0x9e,0xff,0x00,0x00,0xff,0xff,0xd7,0xff,0x00,0x7f,0x82,0x00,0x01,0x00,0xbf
  defb 0xff,0xff,0xf6,0xff,0x00,0xff,0x82,0x00,0xff,0xdf,0xff,0x7f,0xff,0xff,0xff,0xff
  defb 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
  defb 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xac,0xff
  defb 0x9c,0xfe,0x01,0x00,0x00,0xff,0xff,0xdc,0xff,0x02,0x00,0x00,0x10,0x81,0xe3,0x88
  defb 0xe4,0x05,0x80,0x00,0x80,0x02,0x00,0x02,0x87,0xff,0x01,0x02,0x1c,0xff,0xff,0xde
  defb 0xff,0x13,0x39,0x17,0x80,0x80,0x9c,0x8b,0xc0,0x43,0xc7,0xa2,0xf0,0x08,0xf1,0xe0
  defb 0xbc,0x04,0x9c,0x72,0x1c,0x77,0x87,0xff,0x01,0x0c,0x12,0xff,0xff,0xdd,0x7f,0x14
  defb 0x00,0x7d,0x14,0x40,0x87,0xa2,0xaa,0x20,0xc2,0x28,0xa2,0x88,0x0c,0x8a,0x27,0xa2
  defb 0x0c,0xa0,0x8a,0x22,0x82,0x87,0xff,0x01,0x78,0xaa,0xff,0xff,0xdc,0xff,0x09,0x3c
  defb 0x00,0x11,0x14,0x43,0xe8,0xa2,0xaa,0x21,0xfa,0x81,0xff,0x07,0x7e,0x8a,0x28,0xa2
  defb 0x1f,0x9c,0xf2,0x3c,0x88,0xff,0x01,0x0a,0xec,0xff,0xff,0xdc,0xff,0x14,0x18,0x00
  defb 0x11,0x17,0x81,0xc8,0xa2,0xaa,0x20,0xc3,0xc7,0xa2,0xf0,0x0c,0xf1,0xe8,0xa2,0x0c
  defb 0x02,0x82,0x20,0x88,0xff,0x01,0x0d,0xa8,0xff,0xff,0xdc,0xff,0x15,0x00,0x00,0x10
  defb 0xe4,0x00,0x87,0x9c,0x52,0x20,0x42,0x00,0x9c,0x80,0x08,0x80,0x27,0xa2,0x04,0x3c
  defb 0x79,0x9e,0x71,0x87,0xf4,0x01,0x0a,0x00,0xff,0xff,0xde,0xff,0x01,0x00,0x04,0x83
  defb 0xec,0x01,0x02,0x07,0x81,0xea,0x01,0x81,0xc0,0x8d,0xed,0x02,0x08,0x00,0x06,0x97
  defb 0x00,0x06,0x02,0x16,0x34,0x25,0x28,0x07,0x78,0x9c,0x00,0xff,0x1f,0xff,0x9f,0xff
  defb 0xff,0xff,0xff,0xff,0xff,0x9a,0xff,0x9a,0x00,0x03,0x06,0x01,0x03,0x03,0x80
; ------------------------------------------+----------------------------------
; Compressed ROM Switch screen
; 1386b (from 6912b, 80% compression)
; ------------------------------------------+----------------------------------
_compressedROMSwitch:
  defb 0x00,0x00,0xdd,0x00,0x02,0xfe,0x00,0xff,0x8b,0x00,0x90,0x1f,0x83,0x81,0x00,0x01
  defb 0x86,0x87,0x00,0x80,0x8d,0x2f,0x00,0xfc,0x84,0xa0,0x00,0x03,0x8d,0xa7,0x87,0x2f
  defb 0x85,0x1f,0x11,0x01,0x3f,0xff,0xff,0xc0,0x00,0x00,0x1f,0xff,0xf0,0x00,0x07,0xff
  defb 0xe0,0x00,0xff,0xfc,0x80,0x85,0xd8,0x00,0xf8,0x85,0x3f,0x0d,0x3f,0xc0,0x00,0x7f
  defb 0xc0,0x1f,0xf0,0x00,0x0f,0xf8,0x07,0xff,0xf8,0x03,0x87,0x1f,0x87,0x77,0xd8,0xff
  defb 0x00,0x00,0x8b,0xd1,0xa0,0xff,0x8c,0x2f,0xa9,0xff,0x81,0xea,0x02,0x7f,0xff,0xfe
  defb 0x98,0xff,0x0b,0x3f,0xc0,0x3f,0xe0,0x00,0x07,0xfc,0x07,0xfb,0xf8,0x03,0xfb,0xeb
  defb 0xff,0x8a,0xd1,0xa2,0xff,0x8a,0x2f,0xa9,0xff,0x81,0x2a,0x82,0x60,0x9a,0xff,0x02
  defb 0xc0,0x00,0x03,0xf3,0xff,0x88,0xd1,0x9d,0xff,0x01,0x01,0xc0,0x8d,0x2f,0xa9,0xff
  defb 0x02,0xfe,0x00,0x01,0x81,0xff,0x00,0x80,0x99,0xff,0x00,0x7f,0x81,0xff,0x00,0xfe
  defb 0xf4,0xff,0x86,0xd1,0x95,0xff,0x86,0xdf,0x87,0xff,0x86,0x2f,0x86,0xdf,0xa1,0xff
  defb 0x02,0xff,0x00,0x03,0x81,0xff,0x04,0xc0,0x07,0xff,0xf0,0x01,0x96,0xff,0x02,0x80
  defb 0x00,0x01,0xf7,0xff,0x84,0xd1,0xa8,0xff,0x84,0x2f,0x95,0xff,0x87,0xb6,0x8a,0xff
  defb 0x01,0x80,0x07,0x81,0xff,0x00,0xe0,0x9f,0xff,0x03,0xf9,0xfc,0x07,0xf3,0xf3,0xff
  defb 0x82,0xd1,0x9d,0xff,0x00,0x00,0x86,0xb7,0x86,0x2f,0xab,0xff,0x04,0x0f,0xff,0x00
  defb 0xff,0xf0,0x97,0xff,0x02,0x7f,0xc0,0xff,0xfe,0xff,0x97,0x1f,0x95,0xff,0x88,0xdf
  defb 0x85,0xe6,0x81,0xc1,0x95,0xff,0x00,0xc0,0x81,0x1b,0x04,0x1f,0xfc,0x00,0x3f,0xf8
  defb 0x96,0xff,0x81,0x3b,0x00,0xff,0x81,0xf4,0x00,0xff,0x8c,0xff,0x85,0x1f,0x03,0x07
  defb 0x3f,0xff,0xff,0x83,0x1f,0x00,0x80,0x85,0x1f,0x00,0xc0,0x85,0x77,0x00,0xf0,0x87
  defb 0x3f,0x02,0x7f,0xe0,0x00,0x84,0x3f,0x03,0xf8,0x7f,0x1f,0xc3,0x86,0x1f,0x00,0x03
  defb 0x85,0x1f,0x8a,0x7f,0x03,0xf8,0x1f,0xff,0x03,0x87,0x1f,0x00,0xe0,0x8b,0xff,0x88
  defb 0xbf,0x85,0xe7,0x00,0x07,0x86,0x1f,0x86,0x8f,0x8d,0xfe,0x00,0x07,0x81,0x87,0x02
  defb 0x07,0xff,0xf8,0x81,0x79,0x00,0x07,0x81,0x02,0x02,0xf8,0x7f,0x81,0x81,0xa6,0x07
  defb 0xfe,0x00,0x0f,0xff,0xf0,0x00,0x1f,0xe0,0x82,0x02,0x11,0x0f,0xc0,0x00,0x01,0xfe
  defb 0x00,0x1f,0xf0,0x3f,0xc0,0x1f,0xff,0xc0,0x1f,0xe0,0x7f,0x80,0x80,0x82,0x17,0x03
  defb 0xf8,0x00,0x3f,0xe0,0x85,0x1f,0x81,0xe7,0x00,0x7f,0x81,0x2d,0x08,0x0f,0xf0,0x7f
  defb 0x8f,0xf0,0x7f,0x80,0x7f,0x80,0x81,0x24,0x02,0x00,0x7f,0x80,0x81,0x67,0x00,0x1f
  defb 0x81,0xf0,0x83,0x2a,0x88,0xff,0x82,0xdf,0x81,0xff,0x03,0xf8,0xfe,0x0f,0xe3,0x91
  defb 0xff,0x02,0x3f,0xf0,0x00,0x81,0xbd,0x00,0x01,0x81,0xff,0x02,0x3f,0xbf,0x83,0x91
  defb 0xff,0x81,0x1d,0x00,0x0f,0x81,0x42,0x06,0xf0,0x07,0xf8,0x0f,0xfe,0x03,0xfc,0x85
  defb 0xe7,0x8d,0xff,0x88,0xdd,0xa9,0xff,0x00,0x0f,0x81,0xf1,0x01,0xff,0x80,0x81,0xff
  defb 0x00,0x0f,0x86,0xff,0x02,0x3f,0xff,0xf8,0x90,0xff,0x00,0xdf,0x88,0xff,0x03,0xf0
  defb 0x00,0x3f,0xf0,0x88,0xff,0x02,0x3f,0xff,0xfc,0xa3,0xff,0x81,0x65,0x9a,0xff,0x81
  defb 0x2a,0x82,0x38,0x00,0xfe,0x97,0xff,0x02,0x7f,0xc0,0x07,0x82,0x53,0xcf,0xff,0x81
  defb 0x9a,0x81,0xb2,0x02,0x0f,0xff,0x80,0x81,0xc4,0x84,0xff,0x82,0xab,0x8a,0xff,0x00
  defb 0x0f,0x8c,0xff,0x00,0x3f,0x81,0xfa,0x89,0xff,0x81,0xe9,0x82,0xff,0x00,0x07,0x9e
  defb 0xff,0x00,0xfc,0x9c,0xff,0x01,0x0f,0xfc,0xf5,0xff,0x02,0x7f,0xff,0xff,0x81,0xb8
  defb 0x89,0xff,0x00,0x01,0x81,0xba,0x8d,0xff,0x06,0x1f,0xe0,0x3f,0xdf,0xe0,0x3f,0xc0
  defb 0x85,0xff,0x00,0xc0,0x81,0x17,0x88,0xff,0x00,0x0f,0x81,0x3f,0xa2,0xff,0x00,0xf8
  defb 0x9c,0xff,0x00,0x07,0x81,0xff,0x02,0xc0,0x00,0x03,0x98,0xff,0x02,0x3f,0xe0,0x03
  defb 0x81,0xff,0x00,0x80,0x94,0xff,0x85,0xef,0x97,0xff,0x85,0xf7,0x95,0xff,0x81,0xd8
  defb 0x89,0xff,0x83,0x66,0x88,0xff,0x81,0xb5,0x81,0xea,0x8c,0xff,0x00,0x0c,0x82,0xfc
  defb 0x85,0xff,0x81,0x95,0x06,0xc0,0x07,0xf8,0xff,0x07,0xf0,0xff,0x81,0xf9,0x99,0xff
  defb 0x00,0xc0,0x86,0xff,0x02,0x7f,0x1f,0xc3,0x92,0xff,0x00,0xfe,0x81,0xe1,0x07,0x00
  defb 0x07,0xfc,0x07,0xf8,0x1f,0xff,0x03,0x93,0xff,0x01,0xf0,0x00,0x81,0xff,0x03,0x00
  defb 0x07,0xf8,0x07,0xcc,0xff,0x81,0xf2,0x8c,0xff,0x00,0x07,0x82,0x11,0x89,0xff,0x81
  defb 0xab,0x8e,0xff,0x82,0x11,0x86,0xff,0x81,0x95,0x00,0xe0,0x82,0xff,0x00,0xf8,0x9d
  defb 0xff,0x00,0x80,0x9c,0xff,0x00,0x03,0x9e,0xff,0x05,0x1f,0xf0,0x00,0x7f,0xff,0xfe
  defb 0x82,0xff,0x00,0xfc,0xcc,0xff,0x04,0xc0,0xff,0xe0,0x7f,0xc0,0x81,0xff,0x00,0x1f
  defb 0x87,0xff,0x00,0x03,0x89,0xff,0x01,0x00,0xff,0x81,0xc3,0x81,0xff,0x00,0x8f,0x87
  defb 0xff,0x81,0xdf,0x8b,0xff,0x05,0x0f,0xff,0xf0,0x07,0xf8,0xfe,0x9d,0xff,0x02,0xc0
  defb 0xff,0xc0,0x9c,0xff,0x07,0x01,0xff,0x00,0x3f,0xf8,0x00,0x0f,0xf8,0x97,0xff,0x01
  defb 0x0f,0xf8,0x81,0x54,0x00,0xf0,0xb1,0xff,0x81,0x79,0x8c,0xff,0x81,0x6a,0x88,0xff
  defb 0x82,0x77,0x81,0xda,0x00,0x1f,0x82,0xf2,0x81,0xd9,0x82,0xf4,0x03,0xfc,0x00,0xff
  defb 0xe0,0x89,0xff,0x04,0xff,0x80,0x00,0x0f,0xf0,0x99,0xff,0x00,0x00,0x83,0xff,0x00
  defb 0x03,0x8d,0xff,0x83,0x3f,0x00,0x1f,0x83,0xa7,0x02,0x3f,0xf0,0x03,0x82,0x1f,0x00
  defb 0xfe,0x81,0x39,0x85,0x3f,0x00,0x0c,0x86,0x1f,0x81,0xfa,0x09,0xff,0x00,0x1f,0xf0
  defb 0x01,0xff,0xf8,0x00,0xff,0xfc,0x82,0x59,0x82,0x7f,0x02,0xff,0x03,0xff,0x82,0x67
  defb 0x81,0x8a,0x00,0x3f,0x83,0x5e,0x00,0xe0,0x85,0xb7,0x86,0xbf,0x88,0xef,0x83,0x1f
  defb 0x89,0xfa,0x00,0x03,0x8d,0xff,0x00,0x7f,0x8d,0x1f,0x8e,0x0e,0x9e,0x1f,0xbf,0x1e
  defb 0x83,0xff,0x04,0x0f,0xf8,0x03,0xfd,0xfe,0x81,0x02,0x85,0xff,0x04,0x3f,0xc0,0x00
  defb 0x0f,0xc0,0x87,0xff,0x05,0x01,0xff,0xc0,0x7f,0xf0,0x00,0x82,0xff,0x00,0xf8,0x85
  defb 0xff,0x02,0x07,0xff,0xff,0x8b,0xff,0x89,0xf7,0x8f,0xff,0x01,0xff,0xff,0xac,0xff
  defb 0x8d,0x2f,0xe2,0xff,0x02,0x78,0x00,0x07,0x8f,0xff,0x01,0x1f,0xf0,0x89,0xff,0x02
  defb 0xff,0xff,0xe0,0x8b,0xff,0x00,0x03,0x81,0xff,0x83,0x1c,0xa3,0xff,0x8b,0xd1,0xa1
  defb 0xff,0x8b,0x2f,0xe1,0xff,0x01,0x07,0xf8,0x83,0xff,0x01,0xfc,0x01,0x95,0xff,0x82
  defb 0x92,0x81,0xff,0x00,0xf0,0x88,0xff,0x03,0x01,0xff,0xff,0xfe,0xaa,0xff,0x89,0xd1
  defb 0xa3,0xff,0x89,0x2f,0xe2,0xff,0x00,0xfc,0x81,0xff,0x00,0x01,0x8b,0xff,0x82,0x02
  defb 0x88,0xff,0x03,0x7f,0xff,0xff,0xc0,0x82,0xff,0x00,0x7f,0x86,0xff,0x81,0xa4,0x00
  defb 0xfc,0x95,0xff,0x8e,0xdf,0x85,0xff,0x87,0xd1,0xa5,0xff,0x87,0x2f,0xe7,0xff,0x00
  defb 0xff,0x81,0xff,0x00,0xfc,0x85,0xff,0x82,0xd7,0x89,0xff,0x81,0xc3,0x02,0x80,0x00
  defb 0x7f,0x8a,0xff,0x02,0x3f,0xff,0xf8,0xae,0xff,0x82,0x43,0x89,0x27,0x9f,0xff,0x01
  defb 0xff,0xff,0xe6,0xff,0x03,0x03,0xfe,0x00,0x0f,0x83,0xff,0x00,0xff,0x87,0xff,0x81
  defb 0xeb,0x00,0xc0,0x88,0xff,0x00,0x1f,0x82,0x8b,0x82,0xff,0x81,0x16,0x84,0xff,0x01
  defb 0x0f,0xff,0x84,0x1c,0xab,0xff,0x83,0xd1,0xa9,0xff,0x83,0x2f,0xe8,0xff,0x01,0xf8
  defb 0x00,0x87,0xff,0x03,0x0f,0xfc,0x00,0xff,0x89,0xff,0x00,0x07,0x81,0x18,0x8c,0xff
  defb 0x00,0x01,0x81,0xca,0xb1,0xff,0x81,0xd1,0xab,0xff,0x81,0x2f,0xdf,0xff,0x00,0x38
  defb 0xdd,0x00,0x02,0x17,0x10,0x17,0x83,0x00,0x00,0x37,0x85,0x00,0x90,0x1f,0x83,0x00
  defb 0x01,0x16,0x30,0x84,0x00,0x03,0x36,0x26,0x20,0x27,0x83,0x00,0x00,0x2f,0x85,0x00
  defb 0x8d,0x1f,0x01,0x30,0x20,0x84,0x00,0x01,0x25,0x28,0x85,0x00,0x81,0x3f,0x00,0x50
  defb 0x81,0x00,0x01,0x56,0x70,0x85,0x00,0x00,0x60,0x85,0x00,0x01,0x6c,0x68,0x81,0x00
  defb 0xa0,0x1f,0x82,0x5f,0x8a,0x3f,0x01,0x74,0x66,0x9c,0x1f,0x9e,0x3f,0x97,0x5f,0x00
  defb 0x72,0xa4,0x1f,0x00,0x74,0x95,0x9f,0x00,0x50,0x8e,0xdf,0x82,0xde,0x92,0x1f,0x86
  defb 0xbf,0x9d,0x1f,0x00,0x65,0xa6,0x3f,0x00,0x10,0x9d,0x7f,0x81,0x1f,0x82,0x02,0x01
  defb 0x16,0x30,0x84,0x00,0x01,0x34,0x20,0x85,0x00,0x01,0x2c,0x28,0x83,0x00,0x01,0x2f
  defb 0x17,0x85,0x00,0x00,0x37,0x83,0x00,0x90,0x1f,0x00,0x38,0x8d,0x00,0x00,0x27,0x85
  defb 0x00,0x00,0x2f,0x83,0x00,0x90,0x1f,0xce,0x0f,0x80
;
; ------------------------------------------+----------------------------------
; Compressed Unit Off
; 333bytes (from 6912b, 95% compression)
; ------------------------------------------+----------------------------------  
_compressedOff:
  defb 0x00,0x00,0xff,0x00,0xff,0x81,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
  defb 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
  defb 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
  defb 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
  defb 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
  defb 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
  defb 0xce,0xff,0x00,0x3f,0xdf,0x00,0x00,0x12,0x85,0x00,0x82,0x09,0x00,0x36,0x84,0x00
  defb 0x02,0x3f,0x36,0x24,0x85,0x00,0x81,0x1e,0x00,0x52,0x85,0x00,0x03,0x12,0x12,0x52
  defb 0x76,0x85,0x00,0x01,0x36,0x64,0x86,0x00,0x00,0x24,0x87,0x1e,0x81,0x20,0x86,0x1e
  defb 0x01,0x76,0x24,0x8d,0x1f,0x81,0x3a,0x81,0x45,0x00,0x36,0x82,0x39,0x83,0x61,0x82
  defb 0x1f,0x84,0x61,0x00,0x00,0x82,0x5e,0x01,0x12,0x00,0x82,0x06,0x00,0x76,0x83,0x1f
  defb 0x83,0xff,0x83,0x1f,0x84,0xfe,0x83,0x1f,0x82,0x85,0x81,0x75,0x82,0x79,0x83,0xff
  defb 0x83,0x3f,0x85,0xbd,0x85,0x1f,0x82,0x95,0x83,0x5f,0x82,0xb3,0x83,0x5f,0x02,0x2d
  defb 0x2d,0x2d,0x88,0x1f,0x83,0x7b,0x82,0xbe,0x83,0x39,0x82,0x9f,0x00,0x6d,0x81,0x00
  defb 0x81,0x20,0x8d,0x1f,0x83,0xd3,0x82,0x5f,0x82,0x1e,0x90,0x1f,0x83,0xb5,0x00,0x00
  defb 0x81,0x7f,0x81,0x3b,0x81,0x5f,0x00,0x00,0x84,0x7f,0x81,0x94,0x84,0x5f,0x84,0xb5
  defb 0x81,0x9f,0x82,0x5b,0x83,0x09,0x82,0xbf,0x82,0xb4,0x83,0xfb,0x87,0xb5,0x00,0x2d
  defb 0x84,0x7b,0x84,0xbf,0x83,0xd4,0x82,0xfb,0x88,0xd5,0x8a,0x1f,0x82,0xb4,0x00,0x36
  defb 0x83,0x9a,0x93,0x1f,0x83,0xd4,0x84,0xd8,0x93,0x3f,0x00,0x00,0x85,0x20,0x81,0xf6
  defb 0x93,0x5f,0x81,0x20,0x82,0x00,0x82,0xd6,0x00,0x00,0x83,0xdb,0x83,0x34,0x84,0xdb
  defb 0x85,0x41,0x85,0x00,0x83,0x09,0x88,0x13,0x86,0x1e,0xdd,0x07,0x80
_codeend:
;
; ------------------------------------------+----------------------------------
; Byte Rotation Lookup Table
;   used for variable width font routine
; 3584b
; ------------------------------------------+----------------------------------
org MEM_LTBLP
	defb 0x00,0x00,0x01,0x01,0x02,0x02,0x03,0x03,0x04,0x04,0x05,0x05,0x06,0x06,0x07,0x07
	defb 0x08,0x08,0x09,0x09,0x0a,0x0a,0x0b,0x0b,0x0c,0x0c,0x0d,0x0d,0x0e,0x0e,0x0f,0x0f
	defb 0x10,0x10,0x11,0x11,0x12,0x12,0x13,0x13,0x14,0x14,0x15,0x15,0x16,0x16,0x17,0x17
	defb 0x18,0x18,0x19,0x19,0x1a,0x1a,0x1b,0x1b,0x1c,0x1c,0x1d,0x1d,0x1e,0x1e,0x1f,0x1f
	defb 0x20,0x20,0x21,0x21,0x22,0x22,0x23,0x23,0x24,0x24,0x25,0x25,0x26,0x26,0x27,0x27
	defb 0x28,0x28,0x29,0x29,0x2a,0x2a,0x2b,0x2b,0x2c,0x2c,0x2d,0x2d,0x2e,0x2e,0x2f,0x2f
	defb 0x30,0x30,0x31,0x31,0x32,0x32,0x33,0x33,0x34,0x34,0x35,0x35,0x36,0x36,0x37,0x37
	defb 0x38,0x38,0x39,0x39,0x3a,0x3a,0x3b,0x3b,0x3c,0x3c,0x3d,0x3d,0x3e,0x3e,0x3f,0x3f
	defb 0x40,0x40,0x41,0x41,0x42,0x42,0x43,0x43,0x44,0x44,0x45,0x45,0x46,0x46,0x47,0x47
	defb 0x48,0x48,0x49,0x49,0x4a,0x4a,0x4b,0x4b,0x4c,0x4c,0x4d,0x4d,0x4e,0x4e,0x4f,0x4f
	defb 0x50,0x50,0x51,0x51,0x52,0x52,0x53,0x53,0x54,0x54,0x55,0x55,0x56,0x56,0x57,0x57
	defb 0x58,0x58,0x59,0x59,0x5a,0x5a,0x5b,0x5b,0x5c,0x5c,0x5d,0x5d,0x5e,0x5e,0x5f,0x5f
	defb 0x60,0x60,0x61,0x61,0x62,0x62,0x63,0x63,0x64,0x64,0x65,0x65,0x66,0x66,0x67,0x67
	defb 0x68,0x68,0x69,0x69,0x6a,0x6a,0x6b,0x6b,0x6c,0x6c,0x6d,0x6d,0x6e,0x6e,0x6f,0x6f
	defb 0x70,0x70,0x71,0x71,0x72,0x72,0x73,0x73,0x74,0x74,0x75,0x75,0x76,0x76,0x77,0x77
	defb 0x78,0x78,0x79,0x79,0x7a,0x7a,0x7b,0x7b,0x7c,0x7c,0x7d,0x7d,0x7e,0x7e,0x7f,0x7f
	defb 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80
	defb 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80
	defb 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80
	defb 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80
	defb 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80
	defb 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80
	defb 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80
	defb 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80
	defb 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80
	defb 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80
	defb 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80
	defb 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80
	defb 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80
	defb 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80
	defb 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80
	defb 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80
	defb 0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x02,0x03,0x03,0x03,0x03
	defb 0x04,0x04,0x04,0x04,0x05,0x05,0x05,0x05,0x06,0x06,0x06,0x06,0x07,0x07,0x07,0x07
	defb 0x08,0x08,0x08,0x08,0x09,0x09,0x09,0x09,0x0a,0x0a,0x0a,0x0a,0x0b,0x0b,0x0b,0x0b
	defb 0x0c,0x0c,0x0c,0x0c,0x0d,0x0d,0x0d,0x0d,0x0e,0x0e,0x0e,0x0e,0x0f,0x0f,0x0f,0x0f
	defb 0x10,0x10,0x10,0x10,0x11,0x11,0x11,0x11,0x12,0x12,0x12,0x12,0x13,0x13,0x13,0x13
	defb 0x14,0x14,0x14,0x14,0x15,0x15,0x15,0x15,0x16,0x16,0x16,0x16,0x17,0x17,0x17,0x17
	defb 0x18,0x18,0x18,0x18,0x19,0x19,0x19,0x19,0x1a,0x1a,0x1a,0x1a,0x1b,0x1b,0x1b,0x1b
	defb 0x1c,0x1c,0x1c,0x1c,0x1d,0x1d,0x1d,0x1d,0x1e,0x1e,0x1e,0x1e,0x1f,0x1f,0x1f,0x1f
	defb 0x20,0x20,0x20,0x20,0x21,0x21,0x21,0x21,0x22,0x22,0x22,0x22,0x23,0x23,0x23,0x23
	defb 0x24,0x24,0x24,0x24,0x25,0x25,0x25,0x25,0x26,0x26,0x26,0x26,0x27,0x27,0x27,0x27
	defb 0x28,0x28,0x28,0x28,0x29,0x29,0x29,0x29,0x2a,0x2a,0x2a,0x2a,0x2b,0x2b,0x2b,0x2b
	defb 0x2c,0x2c,0x2c,0x2c,0x2d,0x2d,0x2d,0x2d,0x2e,0x2e,0x2e,0x2e,0x2f,0x2f,0x2f,0x2f
	defb 0x30,0x30,0x30,0x30,0x31,0x31,0x31,0x31,0x32,0x32,0x32,0x32,0x33,0x33,0x33,0x33
	defb 0x34,0x34,0x34,0x34,0x35,0x35,0x35,0x35,0x36,0x36,0x36,0x36,0x37,0x37,0x37,0x37
	defb 0x38,0x38,0x38,0x38,0x39,0x39,0x39,0x39,0x3a,0x3a,0x3a,0x3a,0x3b,0x3b,0x3b,0x3b
	defb 0x3c,0x3c,0x3c,0x3c,0x3d,0x3d,0x3d,0x3d,0x3e,0x3e,0x3e,0x3e,0x3f,0x3f,0x3f,0x3f
	defb 0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0
	defb 0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0
	defb 0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0
	defb 0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0
	defb 0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0
	defb 0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0
	defb 0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0
	defb 0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0
	defb 0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0
	defb 0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0
	defb 0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0
	defb 0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0
	defb 0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0
	defb 0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0
	defb 0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0
	defb 0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0,0x00,0x40,0x80,0xc0
	defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	defb 0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03
	defb 0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05
	defb 0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07
	defb 0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09
	defb 0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b
	defb 0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d
	defb 0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f
	defb 0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11
	defb 0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x13,0x13,0x13,0x13,0x13,0x13,0x13,0x13
	defb 0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x15,0x15,0x15,0x15,0x15,0x15,0x15,0x15
	defb 0x16,0x16,0x16,0x16,0x16,0x16,0x16,0x16,0x17,0x17,0x17,0x17,0x17,0x17,0x17,0x17
	defb 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x19,0x19,0x19,0x19,0x19,0x19,0x19,0x19
	defb 0x1a,0x1a,0x1a,0x1a,0x1a,0x1a,0x1a,0x1a,0x1b,0x1b,0x1b,0x1b,0x1b,0x1b,0x1b,0x1b
	defb 0x1c,0x1c,0x1c,0x1c,0x1c,0x1c,0x1c,0x1c,0x1d,0x1d,0x1d,0x1d,0x1d,0x1d,0x1d,0x1d
	defb 0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f
	defb 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0
	defb 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0
	defb 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0
	defb 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0
	defb 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0
	defb 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0
	defb 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0
	defb 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0
	defb 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0
	defb 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0
	defb 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0
	defb 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0
	defb 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0
	defb 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0
	defb 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0
	defb 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0
	defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	defb 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	defb 0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02
	defb 0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03
	defb 0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04
	defb 0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05
	defb 0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06
	defb 0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07
	defb 0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08
	defb 0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09
	defb 0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a
	defb 0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b
	defb 0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c
	defb 0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d
	defb 0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e
	defb 0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f
	defb 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0
	defb 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0
	defb 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0
	defb 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0
	defb 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0
	defb 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0
	defb 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0
	defb 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0
	defb 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0
	defb 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0
	defb 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0
	defb 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0
	defb 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0
	defb 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0
	defb 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0
	defb 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0
	defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	defb 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	defb 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	defb 0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02
	defb 0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02
	defb 0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03
	defb 0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03
	defb 0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04
	defb 0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04
	defb 0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05
	defb 0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05
	defb 0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06
	defb 0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06
	defb 0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07
	defb 0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07
	defb 0x00,0x08,0x10,0x18,0x20,0x28,0x30,0x38,0x40,0x48,0x50,0x58,0x60,0x68,0x70,0x78
	defb 0x80,0x88,0x90,0x98,0xa0,0xa8,0xb0,0xb8,0xc0,0xc8,0xd0,0xd8,0xe0,0xe8,0xf0,0xf8
	defb 0x00,0x08,0x10,0x18,0x20,0x28,0x30,0x38,0x40,0x48,0x50,0x58,0x60,0x68,0x70,0x78
	defb 0x80,0x88,0x90,0x98,0xa0,0xa8,0xb0,0xb8,0xc0,0xc8,0xd0,0xd8,0xe0,0xe8,0xf0,0xf8
	defb 0x00,0x08,0x10,0x18,0x20,0x28,0x30,0x38,0x40,0x48,0x50,0x58,0x60,0x68,0x70,0x78
	defb 0x80,0x88,0x90,0x98,0xa0,0xa8,0xb0,0xb8,0xc0,0xc8,0xd0,0xd8,0xe0,0xe8,0xf0,0xf8
	defb 0x00,0x08,0x10,0x18,0x20,0x28,0x30,0x38,0x40,0x48,0x50,0x58,0x60,0x68,0x70,0x78
	defb 0x80,0x88,0x90,0x98,0xa0,0xa8,0xb0,0xb8,0xc0,0xc8,0xd0,0xd8,0xe0,0xe8,0xf0,0xf8
	defb 0x00,0x08,0x10,0x18,0x20,0x28,0x30,0x38,0x40,0x48,0x50,0x58,0x60,0x68,0x70,0x78
	defb 0x80,0x88,0x90,0x98,0xa0,0xa8,0xb0,0xb8,0xc0,0xc8,0xd0,0xd8,0xe0,0xe8,0xf0,0xf8
	defb 0x00,0x08,0x10,0x18,0x20,0x28,0x30,0x38,0x40,0x48,0x50,0x58,0x60,0x68,0x70,0x78
	defb 0x80,0x88,0x90,0x98,0xa0,0xa8,0xb0,0xb8,0xc0,0xc8,0xd0,0xd8,0xe0,0xe8,0xf0,0xf8
	defb 0x00,0x08,0x10,0x18,0x20,0x28,0x30,0x38,0x40,0x48,0x50,0x58,0x60,0x68,0x70,0x78
	defb 0x80,0x88,0x90,0x98,0xa0,0xa8,0xb0,0xb8,0xc0,0xc8,0xd0,0xd8,0xe0,0xe8,0xf0,0xf8
	defb 0x00,0x08,0x10,0x18,0x20,0x28,0x30,0x38,0x40,0x48,0x50,0x58,0x60,0x68,0x70,0x78
	defb 0x80,0x88,0x90,0x98,0xa0,0xa8,0xb0,0xb8,0xc0,0xc8,0xd0,0xd8,0xe0,0xe8,0xf0,0xf8
	defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	defb 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	defb 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	defb 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	defb 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	defb 0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02
	defb 0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02
	defb 0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02
	defb 0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02
	defb 0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03
	defb 0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03
	defb 0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03
	defb 0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03
	defb 0x00,0x04,0x08,0x0c,0x10,0x14,0x18,0x1c,0x20,0x24,0x28,0x2c,0x30,0x34,0x38,0x3c
	defb 0x40,0x44,0x48,0x4c,0x50,0x54,0x58,0x5c,0x60,0x64,0x68,0x6c,0x70,0x74,0x78,0x7c
	defb 0x80,0x84,0x88,0x8c,0x90,0x94,0x98,0x9c,0xa0,0xa4,0xa8,0xac,0xb0,0xb4,0xb8,0xbc
	defb 0xc0,0xc4,0xc8,0xcc,0xd0,0xd4,0xd8,0xdc,0xe0,0xe4,0xe8,0xec,0xf0,0xf4,0xf8,0xfc
	defb 0x00,0x04,0x08,0x0c,0x10,0x14,0x18,0x1c,0x20,0x24,0x28,0x2c,0x30,0x34,0x38,0x3c
	defb 0x40,0x44,0x48,0x4c,0x50,0x54,0x58,0x5c,0x60,0x64,0x68,0x6c,0x70,0x74,0x78,0x7c
	defb 0x80,0x84,0x88,0x8c,0x90,0x94,0x98,0x9c,0xa0,0xa4,0xa8,0xac,0xb0,0xb4,0xb8,0xbc
	defb 0xc0,0xc4,0xc8,0xcc,0xd0,0xd4,0xd8,0xdc,0xe0,0xe4,0xe8,0xec,0xf0,0xf4,0xf8,0xfc
	defb 0x00,0x04,0x08,0x0c,0x10,0x14,0x18,0x1c,0x20,0x24,0x28,0x2c,0x30,0x34,0x38,0x3c
	defb 0x40,0x44,0x48,0x4c,0x50,0x54,0x58,0x5c,0x60,0x64,0x68,0x6c,0x70,0x74,0x78,0x7c
	defb 0x80,0x84,0x88,0x8c,0x90,0x94,0x98,0x9c,0xa0,0xa4,0xa8,0xac,0xb0,0xb4,0xb8,0xbc
	defb 0xc0,0xc4,0xc8,0xcc,0xd0,0xd4,0xd8,0xdc,0xe0,0xe4,0xe8,0xec,0xf0,0xf4,0xf8,0xfc
	defb 0x00,0x04,0x08,0x0c,0x10,0x14,0x18,0x1c,0x20,0x24,0x28,0x2c,0x30,0x34,0x38,0x3c
	defb 0x40,0x44,0x48,0x4c,0x50,0x54,0x58,0x5c,0x60,0x64,0x68,0x6c,0x70,0x74,0x78,0x7c
	defb 0x80,0x84,0x88,0x8c,0x90,0x94,0x98,0x9c,0xa0,0xa4,0xa8,0xac,0xb0,0xb4,0xb8,0xbc
	defb 0xc0,0xc4,0xc8,0xcc,0xd0,0xd4,0xd8,0xdc,0xe0,0xe4,0xe8,0xec,0xf0,0xf4,0xf8,0xfc
	defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	defb 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	defb 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	defb 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	defb 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	defb 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	defb 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	defb 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	defb 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	defb 0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e
	defb 0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e
	defb 0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e
	defb 0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e
	defb 0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e
	defb 0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe
	defb 0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde
	defb 0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe
	defb 0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e
	defb 0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e
	defb 0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e
	defb 0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e
	defb 0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e
	defb 0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe
	defb 0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde
	defb 0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe
; ------------------------------------------+----------------------------------
; ROM text entry data compressed
; each entry is maximum 36b, 21*36=756b per page, 126*36=4536b total
; ------------------------------------------+----------------------------------
_textData:
  defb 0x38,0x1e,0x54,0x75,0x72,0x6e,0x20,0x5a,0x58,0x20,0x50,0x69,0x63,0x6f,0x5a,0x58
  defb 0x43,0x78,0x20,0x55,0x6e,0x69,0x74,0x20,0x4f,0x66,0x66,0x0a,0x1e,0x52,0x4f,0x4d
  defb 0x20,0x54,0x65,0x73,0x74,0x65,0x72,0x09,0x1c,0x1d,0x0a,0x1e,0x4c,0x6f,0x6f,0x6b
  defb 0x69,0x6e,0x67,0x20,0x47,0x6c,0x61,0x73,0x73,0x20,0x81,0x1c,0x81,0x21,0x0c,0x65
  defb 0x74,0x72,0x6f,0x6c,0x65,0x75,0x6d,0x20,0x44,0x69,0x61,0x67,0x82,0x2f,0x06,0x76
  defb 0x31,0x2e,0x35,0x39,0x0a,0x1e,0x81,0x50,0x05,0x53,0x70,0x65,0x63,0x74,0x72,0x85
  defb 0x1a,0x0c,0x6e,0x6f,0x73,0x74,0x69,0x63,0x73,0x20,0x76,0x30,0x2e,0x33,0x37,0x83
  defb 0x4d,0x8a,0x21,0x82,0x64,0x12,0x20,0x43,0x61,0x72,0x74,0x72,0x69,0x64,0x67,0x65
  defb 0x0a,0x1e,0x31,0x32,0x38,0x6b,0x20,0x52,0x41,0x86,0x7d,0x11,0x0a,0x1e,0x57,0x68
  defb 0x65,0x72,0x65,0x20,0x54,0x69,0x6d,0x65,0x20,0x53,0x74,0x6f,0x6f,0x64,0x81,0x05
  defb 0x04,0x69,0x6c,0x6c,0x20,0x28,0x82,0x28,0x0e,0x29,0x09,0x1a,0x1b,0x0a,0x1e,0x41
  defb 0x75,0x74,0x6f,0x6d,0x61,0x6e,0x69,0x61,0x83,0x0d,0x09,0x43,0x68,0x61,0x73,0x65
  defb 0x20,0x48,0x2e,0x51,0x2e,0x89,0x23,0x0a,0x1f,0x4f,0x72,0x69,0x67,0x69,0x6e,0x61
  defb 0x6c,0x20,0x34,0x82,0x5e,0x02,0x4f,0x4d,0x00,0x80
; 218bytes
;		       12345678901234567890123456789012
	; defb 30,"Turn ZX PicoZXCx Unit Off",10
	; defb 30,"ROM Tester",9,28,29,10
	; defb 30,"Looking Glass ROM",10
    ; defb 30,"Retroleum DiagROM v1.59",10
    ; defb 30,"ZX Spectrum Diagnostics v0.37",9,28,29,10
    ; defb 30,"ZX Spectrum Test Cartridge",10
    ; defb 30,"128k RAM Tester",10
    ; defb 30,"Where Time Stood Still (128k)",9,26,27,10
    ; defb 30,"Automania",9,26,27,10
    ; defb 30,"Chase H.Q. (128k)",9,26,27,10
    ; defb 31,"Original 48k ROM",0
; to make this ROM 8192bytes long
org MEM_ORG+0x1fff
	defb 0x00
END MEM_ORG
